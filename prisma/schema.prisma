generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  password  String
  username  String    @unique
  createdAt DateTime  @default(now())
  role      ROLE?
  //products  Product[]
  employee  Employee?
}

// model Product {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   name        String   @db.VarChar(255)
//   belongsToId String
//   belongsTo   User     @relation(fields: [belongsToId], references: [id])
//   updates     Update[]

//   @@unique([id, belongsToId])
// }

model Employee {
  id        String    @id @default(uuid())
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  birthDate DateTime? @db.Date
  gender    GENDER?
  status    STATUS?   @default(OFFLINE)
  metrics   Metric[] 
  userId    String    @unique
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model Metric {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  employeeId    String
  mentalScore   Float?
  physicalScore Float?
  employee      Employee @relation(fields: [employeeId], references: [id],onDelete: Cascade)
}

// model Update {
//   id           String        @id @default(uuid())
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   title        String        @db.VarChar(255)
//   body         String
//   status       UPDATE_STATUS @default(IN_PROGRESS)
//   version      String?
//   asset        String?
//   productId    String
//   product      Product       @relation(fields: [productId], references: [id])
//   updatePoints UpdatePoint[]
// }

// model UpdatePoint {
//   id          String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime
//   name        String   @db.VarChar(255)
//   description String
//   updateId    String
//   update      Update   @relation(fields: [updateId], references: [id])
// }

enum UPDATE_STATUS {
  IN_PROGRESS
  LIVE
  DEPRECATED
  ARCHIVED
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum STATUS {
  ACTIVE
  OFFLINE
}

enum ROLE {
  ADMIN
  EMPLOYEE
  MANAGER
}
