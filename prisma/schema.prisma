generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    String     @id @db.VarChar @default(uuid())
  password  String     @db.VarChar
  username  String     @db.VarChar @unique
  createdAt DateTime   @db.Timestamp(6)
  role      ROLE?
  employee  Employee?
}

model Employee {
  employeeId String     @id @db.VarChar @default(uuid())
  firstName  String     @db.VarChar
  lastName   String     @db.VarChar
  birthDate  DateTime   @db.Timestamp(6)
  gender     GENDER?
  status     STATUS?    @default(OFFLINE)
  userId     String    @db.VarChar @unique
  ActCount   ActCount[]
  Bpm        Bpm[]
  Gsr        Gsr[]
  user       User      @relation(fields: [userId], references: [userId], onUpdate: NoAction)
  metrics    Metric[]
  PassOut    PassOut[]
  Sos        Sos[]
}

model Metric {
  createdAt     DateTime @db.Timestamp(6)
  employeeId    String   @db.VarChar
  mentalScore   Float?
  physicalScore Float?
  employee      Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([createdAt, employeeId])
}

model ActCount {
  employeeId String   @db.VarChar
  createdAt  DateTime @db.Timestamp(6)
  count      Int?
  Employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([employeeId, createdAt])
}

model Bpm {
  employeeId String   @db.VarChar
  createdAt  DateTime @db.Timestamp(6)
  value      Float?
  Employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([employeeId, createdAt])
}

model Gsr {
  employeeId String   @db.VarChar
  createdAt  DateTime @db.Timestamp(6)
  value      Float?
  Employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([employeeId, createdAt])
}

model Overall {
  createdAt        DateTime @id @db.Timestamp(6)
  avgMentalScore   Float?
  avgPhysicalScore Float?
}

model PassOut {
  employeeId String   @db.VarChar
  createdAt  DateTime @db.Timestamp(6)
  value      Boolean
  Employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([employeeId, createdAt])
}

model Sos {
  employeeId String   @db.VarChar
  createdAt  DateTime @db.Timestamp(6)
  value      Boolean
  Employee   Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade, onUpdate: NoAction)

  @@id([employeeId, createdAt])
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum ROLE {
  ADMIN
  EMPLOYEE
  MANAGER
}

enum STATUS {
  ACTIVE
  OFFLINE
}
